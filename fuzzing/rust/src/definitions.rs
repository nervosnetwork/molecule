// Generated by Molecule 0.7.5

use molecule::prelude::*;
#[derive(Clone)]
pub struct ArrayType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ArrayType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ArrayType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ArrayType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for ArrayType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        ArrayType::new_unchecked(v)
    }
}
impl ArrayType {
    const DEFAULT_VALUE: [u8; 3] = [0, 0, 0];
    pub const TOTAL_SIZE: usize = 3;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 3;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> ArrayTypeReader<'r> {
        ArrayTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ArrayType {
    type Builder = ArrayTypeBuilder;
    const NAME: &'static str = "ArrayType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ArrayType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ArrayTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ArrayTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0(), self.nth1(), self.nth2()])
    }
}
#[derive(Clone, Copy)]
pub struct ArrayTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ArrayTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ArrayTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ArrayTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> ArrayTypeReader<'r> {
    pub const TOTAL_SIZE: usize = 3;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 3;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for ArrayTypeReader<'r> {
    type Entity = ArrayType;
    const NAME: &'static str = "ArrayTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ArrayTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone)]
pub struct ArrayTypeBuilder(pub(crate) [Byte; 3]);
impl ::core::fmt::Debug for ArrayTypeBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for ArrayTypeBuilder {
    fn default() -> Self {
        ArrayTypeBuilder([Byte::default(), Byte::default(), Byte::default()])
    }
}
impl ArrayTypeBuilder {
    pub const TOTAL_SIZE: usize = 3;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 3;
    pub fn set(mut self, v: [Byte; 3]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
}
impl molecule::prelude::Builder for ArrayTypeBuilder {
    type Entity = ArrayType;
    const NAME: &'static str = "ArrayTypeBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ArrayType::new_unchecked(inner.into())
    }
}
impl From<[Byte; 3usize]> for ArrayType {
    fn from(value: [Byte; 3usize]) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl ::core::convert::TryFrom<&[Byte]> for ArrayType {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[Byte]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(Self::new_builder()
            .set(<&[Byte; 3usize]>::try_from(value)?.clone())
            .build())
    }
}
impl From<ArrayType> for [Byte; 3usize] {
    #[track_caller]
    fn from(value: ArrayType) -> Self {
        [value.nth0(), value.nth1(), value.nth2()]
    }
}
impl From<[u8; 3usize]> for ArrayType {
    fn from(value: [u8; 3usize]) -> Self {
        ArrayTypeReader::new_unchecked(&value).to_entity()
    }
}
impl ::core::convert::TryFrom<&[u8]> for ArrayType {
    type Error = ::core::array::TryFromSliceError;
    fn try_from(value: &[u8]) -> Result<Self, ::core::array::TryFromSliceError> {
        Ok(<[u8; 3usize]>::try_from(value)?.into())
    }
}
impl From<ArrayType> for [u8; 3usize] {
    #[track_caller]
    fn from(value: ArrayType) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<ArrayTypeReader<'a>> for &'a [u8; 3usize] {
    #[track_caller]
    fn from(value: ArrayTypeReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
impl<'a> From<&'a ArrayTypeReader<'a>> for &'a [u8; 3usize] {
    #[track_caller]
    fn from(value: &'a ArrayTypeReader<'a>) -> Self {
        ::core::convert::TryFrom::try_from(value.as_slice()).unwrap()
    }
}
#[derive(Clone)]
pub struct StructType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for StructType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for StructType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for StructType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "f1", self.f1())?;
        write!(f, ", {}: {}", "f2", self.f2())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for StructType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        StructType::new_unchecked(v)
    }
}
impl StructType {
    const DEFAULT_VALUE: [u8; 4] = [0, 0, 0, 0];
    pub const TOTAL_SIZE: usize = 4;
    pub const FIELD_SIZES: [usize; 2] = [3, 1];
    pub const FIELD_COUNT: usize = 2;
    pub fn f1(&self) -> ArrayType {
        ArrayType::new_unchecked(self.0.slice(0..3))
    }
    pub fn f2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3..4))
    }
    pub fn as_reader<'r>(&'r self) -> StructTypeReader<'r> {
        StructTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for StructType {
    type Builder = StructTypeBuilder;
    const NAME: &'static str = "StructType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        StructType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        StructTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        StructTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().f1(self.f1()).f2(self.f2())
    }
}
#[derive(Clone, Copy)]
pub struct StructTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for StructTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for StructTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for StructTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "f1", self.f1())?;
        write!(f, ", {}: {}", "f2", self.f2())?;
        write!(f, " }}")
    }
}
impl<'r> StructTypeReader<'r> {
    pub const TOTAL_SIZE: usize = 4;
    pub const FIELD_SIZES: [usize; 2] = [3, 1];
    pub const FIELD_COUNT: usize = 2;
    pub fn f1(&self) -> ArrayTypeReader<'r> {
        ArrayTypeReader::new_unchecked(&self.as_slice()[0..3])
    }
    pub fn f2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
}
impl<'r> molecule::prelude::Reader<'r> for StructTypeReader<'r> {
    type Entity = StructType;
    const NAME: &'static str = "StructTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        StructTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct StructTypeBuilder {
    pub(crate) f1: ArrayType,
    pub(crate) f2: Byte,
}
impl StructTypeBuilder {
    pub const TOTAL_SIZE: usize = 4;
    pub const FIELD_SIZES: [usize; 2] = [3, 1];
    pub const FIELD_COUNT: usize = 2;
    pub fn f1(mut self, v: ArrayType) -> Self {
        self.f1 = v;
        self
    }
    pub fn f2(mut self, v: Byte) -> Self {
        self.f2 = v;
        self
    }
}
impl molecule::prelude::Builder for StructTypeBuilder {
    type Entity = StructType;
    const NAME: &'static str = "StructTypeBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.f1.as_slice())?;
        writer.write_all(self.f2.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        StructType::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct FixVecType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for FixVecType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for FixVecType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for FixVecType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for FixVecType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        FixVecType::new_unchecked(v)
    }
}
impl FixVecType {
    const DEFAULT_VALUE: [u8; 4] = [0, 0, 0, 0];
    pub const ITEM_SIZE: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Byte> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Byte {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.0.slice(molecule::NUMBER_SIZE..)
    }
    pub fn as_reader<'r>(&'r self) -> FixVecTypeReader<'r> {
        FixVecTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for FixVecType {
    type Builder = FixVecTypeBuilder;
    const NAME: &'static str = "FixVecType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        FixVecType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        FixVecTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        FixVecTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct FixVecTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for FixVecTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for FixVecTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for FixVecTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> FixVecTypeReader<'r> {
    pub const ITEM_SIZE: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<ByteReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> ByteReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        &self.as_slice()[molecule::NUMBER_SIZE..]
    }
}
impl<'r> molecule::prelude::Reader<'r> for FixVecTypeReader<'r> {
    type Entity = FixVecType;
    const NAME: &'static str = "FixVecTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        FixVecTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct FixVecTypeBuilder(pub(crate) Vec<Byte>);
impl FixVecTypeBuilder {
    pub const ITEM_SIZE: usize = 1;
    pub fn set(mut self, v: Vec<Byte>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Byte) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Byte>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
    pub fn replace(&mut self, index: usize, v: Byte) -> Option<Byte> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for FixVecTypeBuilder {
    type Entity = FixVecType;
    const NAME: &'static str = "FixVecTypeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        FixVecType::new_unchecked(inner.into())
    }
}
pub struct FixVecTypeIterator(FixVecType, usize, usize);
impl ::core::iter::Iterator for FixVecTypeIterator {
    type Item = Byte;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for FixVecTypeIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for FixVecType {
    type Item = Byte;
    type IntoIter = FixVecTypeIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        FixVecTypeIterator(self, 0, len)
    }
}
impl ::core::iter::FromIterator<Byte> for FixVecType {
    fn from_iter<T: IntoIterator<Item = Byte>>(iter: T) -> Self {
        Self::new_builder().extend(iter).build()
    }
}
impl ::core::iter::FromIterator<u8> for FixVecType {
    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
        Self::new_builder()
            .extend(iter.into_iter().map(Into::into))
            .build()
    }
}
#[derive(Clone)]
pub struct DynVecType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for DynVecType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for DynVecType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for DynVecType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for DynVecType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        DynVecType::new_unchecked(v)
    }
}
impl DynVecType {
    const DEFAULT_VALUE: [u8; 4] = [4, 0, 0, 0];
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<FixVecType> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> FixVecType {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            FixVecType::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            FixVecType::new_unchecked(self.0.slice(start..end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> DynVecTypeReader<'r> {
        DynVecTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for DynVecType {
    type Builder = DynVecTypeBuilder;
    const NAME: &'static str = "DynVecType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        DynVecType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DynVecTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DynVecTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct DynVecTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DynVecTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DynVecTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DynVecTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> DynVecTypeReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<FixVecTypeReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> FixVecTypeReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            FixVecTypeReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            FixVecTypeReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for DynVecTypeReader<'r> {
    type Entity = DynVecType;
    const NAME: &'static str = "DynVecTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        DynVecTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            FixVecTypeReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct DynVecTypeBuilder(pub(crate) Vec<FixVecType>);
impl DynVecTypeBuilder {
    pub fn set(mut self, v: Vec<FixVecType>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: FixVecType) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = FixVecType>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
    pub fn replace(&mut self, index: usize, v: FixVecType) -> Option<FixVecType> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for DynVecTypeBuilder {
    type Entity = DynVecType;
    const NAME: &'static str = "DynVecTypeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        DynVecType::new_unchecked(inner.into())
    }
}
pub struct DynVecTypeIterator(DynVecType, usize, usize);
impl ::core::iter::Iterator for DynVecTypeIterator {
    type Item = FixVecType;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for DynVecTypeIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for DynVecType {
    type Item = FixVecType;
    type IntoIter = DynVecTypeIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        DynVecTypeIterator(self, 0, len)
    }
}
impl<'r> DynVecTypeReader<'r> {
    pub fn iter<'t>(&'t self) -> DynVecTypeReaderIterator<'t, 'r> {
        DynVecTypeReaderIterator(&self, 0, self.len())
    }
}
pub struct DynVecTypeReaderIterator<'t, 'r>(&'t DynVecTypeReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for DynVecTypeReaderIterator<'t, 'r> {
    type Item = FixVecTypeReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for DynVecTypeReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::FromIterator<FixVecType> for DynVecType {
    fn from_iter<T: IntoIterator<Item = FixVecType>>(iter: T) -> Self {
        Self::new_builder().extend(iter).build()
    }
}
#[derive(Clone)]
pub struct OptType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for OptType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for OptType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for OptType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        if let Some(v) = self.to_opt() {
            write!(f, "{}(Some({}))", Self::NAME, v)
        } else {
            write!(f, "{}(None)", Self::NAME)
        }
    }
}
impl ::core::default::Default for OptType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        OptType::new_unchecked(v)
    }
}
impl OptType {
    const DEFAULT_VALUE: [u8; 0] = [];
    pub fn is_none(&self) -> bool {
        self.0.is_empty()
    }
    pub fn is_some(&self) -> bool {
        !self.0.is_empty()
    }
    pub fn to_opt(&self) -> Option<DynVecType> {
        if self.is_none() {
            None
        } else {
            Some(DynVecType::new_unchecked(self.0.clone()))
        }
    }
    pub fn as_reader<'r>(&'r self) -> OptTypeReader<'r> {
        OptTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for OptType {
    type Builder = OptTypeBuilder;
    const NAME: &'static str = "OptType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        OptType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OptTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OptTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_opt())
    }
}
#[derive(Clone, Copy)]
pub struct OptTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for OptTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for OptTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for OptTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        if let Some(v) = self.to_opt() {
            write!(f, "{}(Some({}))", Self::NAME, v)
        } else {
            write!(f, "{}(None)", Self::NAME)
        }
    }
}
impl<'r> OptTypeReader<'r> {
    pub fn is_none(&self) -> bool {
        self.0.is_empty()
    }
    pub fn is_some(&self) -> bool {
        !self.0.is_empty()
    }
    pub fn to_opt(&self) -> Option<DynVecTypeReader<'r>> {
        if self.is_none() {
            None
        } else {
            Some(DynVecTypeReader::new_unchecked(self.as_slice()))
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for OptTypeReader<'r> {
    type Entity = OptType;
    const NAME: &'static str = "OptTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        OptTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        if !slice.is_empty() {
            DynVecTypeReader::verify(&slice[..], compatible)?;
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct OptTypeBuilder(pub(crate) Option<DynVecType>);
impl OptTypeBuilder {
    pub fn set(mut self, v: Option<DynVecType>) -> Self {
        self.0 = v;
        self
    }
}
impl molecule::prelude::Builder for OptTypeBuilder {
    type Entity = OptType;
    const NAME: &'static str = "OptTypeBuilder";
    fn expected_length(&self) -> usize {
        self.0
            .as_ref()
            .map(|ref inner| inner.as_slice().len())
            .unwrap_or(0)
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        self.0
            .as_ref()
            .map(|ref inner| writer.write_all(inner.as_slice()))
            .unwrap_or(Ok(()))
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        OptType::new_unchecked(inner.into())
    }
}
impl From<DynVecType> for OptType {
    fn from(value: DynVecType) -> Self {
        Self::new_builder().set(Some(value)).build()
    }
}
#[derive(Clone)]
pub struct TableType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TableType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TableType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TableType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "f1", self.f1())?;
        write!(f, ", {}: {}", "f2", self.f2())?;
        write!(f, ", {}: {}", "f3", self.f3())?;
        write!(f, ", {}: {}", "f4", self.f4())?;
        write!(f, ", {}: {}", "f5", self.f5())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for TableType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        TableType::new_unchecked(v)
    }
}
impl TableType {
    const DEFAULT_VALUE: [u8; 39] = [
        39, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 5;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn f1(&self) -> FixVecType {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        FixVecType::new_unchecked(self.0.slice(start..end))
    }
    pub fn f2(&self) -> DynVecType {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        DynVecType::new_unchecked(self.0.slice(start..end))
    }
    pub fn f3(&self) -> StructType {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        StructType::new_unchecked(self.0.slice(start..end))
    }
    pub fn f4(&self) -> ArrayType {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ArrayType::new_unchecked(self.0.slice(start..end))
    }
    pub fn f5(&self) -> OptType {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[24..]) as usize;
            OptType::new_unchecked(self.0.slice(start..end))
        } else {
            OptType::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> TableTypeReader<'r> {
        TableTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TableType {
    type Builder = TableTypeBuilder;
    const NAME: &'static str = "TableType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TableType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TableTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TableTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .f1(self.f1())
            .f2(self.f2())
            .f3(self.f3())
            .f4(self.f4())
            .f5(self.f5())
    }
}
#[derive(Clone, Copy)]
pub struct TableTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TableTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TableTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TableTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "f1", self.f1())?;
        write!(f, ", {}: {}", "f2", self.f2())?;
        write!(f, ", {}: {}", "f3", self.f3())?;
        write!(f, ", {}: {}", "f4", self.f4())?;
        write!(f, ", {}: {}", "f5", self.f5())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> TableTypeReader<'r> {
    pub const FIELD_COUNT: usize = 5;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn f1(&self) -> FixVecTypeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        FixVecTypeReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn f2(&self) -> DynVecTypeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        DynVecTypeReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn f3(&self) -> StructTypeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        StructTypeReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn f4(&self) -> ArrayTypeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ArrayTypeReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn f5(&self) -> OptTypeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[24..]) as usize;
            OptTypeReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            OptTypeReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for TableTypeReader<'r> {
    type Entity = TableType;
    const NAME: &'static str = "TableTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        TableTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        FixVecTypeReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        DynVecTypeReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        StructTypeReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        ArrayTypeReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        OptTypeReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct TableTypeBuilder {
    pub(crate) f1: FixVecType,
    pub(crate) f2: DynVecType,
    pub(crate) f3: StructType,
    pub(crate) f4: ArrayType,
    pub(crate) f5: OptType,
}
impl TableTypeBuilder {
    pub const FIELD_COUNT: usize = 5;
    pub fn f1(mut self, v: FixVecType) -> Self {
        self.f1 = v;
        self
    }
    pub fn f2(mut self, v: DynVecType) -> Self {
        self.f2 = v;
        self
    }
    pub fn f3(mut self, v: StructType) -> Self {
        self.f3 = v;
        self
    }
    pub fn f4(mut self, v: ArrayType) -> Self {
        self.f4 = v;
        self
    }
    pub fn f5(mut self, v: OptType) -> Self {
        self.f5 = v;
        self
    }
}
impl molecule::prelude::Builder for TableTypeBuilder {
    type Entity = TableType;
    const NAME: &'static str = "TableTypeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.f1.as_slice().len()
            + self.f2.as_slice().len()
            + self.f3.as_slice().len()
            + self.f4.as_slice().len()
            + self.f5.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.f1.as_slice().len();
        offsets.push(total_size);
        total_size += self.f2.as_slice().len();
        offsets.push(total_size);
        total_size += self.f3.as_slice().len();
        offsets.push(total_size);
        total_size += self.f4.as_slice().len();
        offsets.push(total_size);
        total_size += self.f5.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.f1.as_slice())?;
        writer.write_all(self.f2.as_slice())?;
        writer.write_all(self.f3.as_slice())?;
        writer.write_all(self.f4.as_slice())?;
        writer.write_all(self.f5.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TableType::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct UnionType(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for UnionType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for UnionType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for UnionType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::core::default::Default for UnionType {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        UnionType::new_unchecked(v)
    }
}
impl UnionType {
    const DEFAULT_VALUE: [u8; 7] = [0, 0, 0, 0, 0, 0, 0];
    pub const ITEMS_COUNT: usize = 5;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> UnionTypeUnion {
        let inner = self.0.slice(molecule::NUMBER_SIZE..);
        match self.item_id() {
            0 => ArrayType::new_unchecked(inner).into(),
            1 => StructType::new_unchecked(inner).into(),
            2 => FixVecType::new_unchecked(inner).into(),
            3 => DynVecType::new_unchecked(inner).into(),
            4 => TableType::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> UnionTypeReader<'r> {
        UnionTypeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for UnionType {
    type Builder = UnionTypeBuilder;
    const NAME: &'static str = "UnionType";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        UnionType(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        UnionTypeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        UnionTypeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct UnionTypeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for UnionTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for UnionTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for UnionTypeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> UnionTypeReader<'r> {
    pub const ITEMS_COUNT: usize = 5;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> UnionTypeUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            0 => ArrayTypeReader::new_unchecked(inner).into(),
            1 => StructTypeReader::new_unchecked(inner).into(),
            2 => FixVecTypeReader::new_unchecked(inner).into(),
            3 => DynVecTypeReader::new_unchecked(inner).into(),
            4 => TableTypeReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for UnionTypeReader<'r> {
    type Entity = UnionType;
    const NAME: &'static str = "UnionTypeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        UnionTypeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            0 => ArrayTypeReader::verify(inner_slice, compatible),
            1 => StructTypeReader::verify(inner_slice, compatible),
            2 => FixVecTypeReader::verify(inner_slice, compatible),
            3 => DynVecTypeReader::verify(inner_slice, compatible),
            4 => TableTypeReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEMS_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct UnionTypeBuilder(pub(crate) UnionTypeUnion);
impl UnionTypeBuilder {
    pub const ITEMS_COUNT: usize = 5;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::core::convert::Into<UnionTypeUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for UnionTypeBuilder {
    type Entity = UnionType;
    const NAME: &'static str = "UnionTypeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        UnionType::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum UnionTypeUnion {
    ArrayType(ArrayType),
    StructType(StructType),
    FixVecType(FixVecType),
    DynVecType(DynVecType),
    TableType(TableType),
}
#[derive(Debug, Clone, Copy)]
pub enum UnionTypeUnionReader<'r> {
    ArrayType(ArrayTypeReader<'r>),
    StructType(StructTypeReader<'r>),
    FixVecType(FixVecTypeReader<'r>),
    DynVecType(DynVecTypeReader<'r>),
    TableType(TableTypeReader<'r>),
}
impl ::core::default::Default for UnionTypeUnion {
    fn default() -> Self {
        UnionTypeUnion::ArrayType(::core::default::Default::default())
    }
}
impl ::core::fmt::Display for UnionTypeUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            UnionTypeUnion::ArrayType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, ArrayType::NAME, item)
            }
            UnionTypeUnion::StructType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, StructType::NAME, item)
            }
            UnionTypeUnion::FixVecType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, FixVecType::NAME, item)
            }
            UnionTypeUnion::DynVecType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, DynVecType::NAME, item)
            }
            UnionTypeUnion::TableType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, TableType::NAME, item)
            }
        }
    }
}
impl<'r> ::core::fmt::Display for UnionTypeUnionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            UnionTypeUnionReader::ArrayType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, ArrayType::NAME, item)
            }
            UnionTypeUnionReader::StructType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, StructType::NAME, item)
            }
            UnionTypeUnionReader::FixVecType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, FixVecType::NAME, item)
            }
            UnionTypeUnionReader::DynVecType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, DynVecType::NAME, item)
            }
            UnionTypeUnionReader::TableType(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, TableType::NAME, item)
            }
        }
    }
}
impl UnionTypeUnion {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            UnionTypeUnion::ArrayType(ref item) => write!(f, "{}", item),
            UnionTypeUnion::StructType(ref item) => write!(f, "{}", item),
            UnionTypeUnion::FixVecType(ref item) => write!(f, "{}", item),
            UnionTypeUnion::DynVecType(ref item) => write!(f, "{}", item),
            UnionTypeUnion::TableType(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> UnionTypeUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            UnionTypeUnionReader::ArrayType(ref item) => write!(f, "{}", item),
            UnionTypeUnionReader::StructType(ref item) => write!(f, "{}", item),
            UnionTypeUnionReader::FixVecType(ref item) => write!(f, "{}", item),
            UnionTypeUnionReader::DynVecType(ref item) => write!(f, "{}", item),
            UnionTypeUnionReader::TableType(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::core::convert::From<ArrayType> for UnionTypeUnion {
    fn from(item: ArrayType) -> Self {
        UnionTypeUnion::ArrayType(item)
    }
}
impl ::core::convert::From<StructType> for UnionTypeUnion {
    fn from(item: StructType) -> Self {
        UnionTypeUnion::StructType(item)
    }
}
impl ::core::convert::From<FixVecType> for UnionTypeUnion {
    fn from(item: FixVecType) -> Self {
        UnionTypeUnion::FixVecType(item)
    }
}
impl ::core::convert::From<DynVecType> for UnionTypeUnion {
    fn from(item: DynVecType) -> Self {
        UnionTypeUnion::DynVecType(item)
    }
}
impl ::core::convert::From<TableType> for UnionTypeUnion {
    fn from(item: TableType) -> Self {
        UnionTypeUnion::TableType(item)
    }
}
impl<'r> ::core::convert::From<ArrayTypeReader<'r>> for UnionTypeUnionReader<'r> {
    fn from(item: ArrayTypeReader<'r>) -> Self {
        UnionTypeUnionReader::ArrayType(item)
    }
}
impl<'r> ::core::convert::From<StructTypeReader<'r>> for UnionTypeUnionReader<'r> {
    fn from(item: StructTypeReader<'r>) -> Self {
        UnionTypeUnionReader::StructType(item)
    }
}
impl<'r> ::core::convert::From<FixVecTypeReader<'r>> for UnionTypeUnionReader<'r> {
    fn from(item: FixVecTypeReader<'r>) -> Self {
        UnionTypeUnionReader::FixVecType(item)
    }
}
impl<'r> ::core::convert::From<DynVecTypeReader<'r>> for UnionTypeUnionReader<'r> {
    fn from(item: DynVecTypeReader<'r>) -> Self {
        UnionTypeUnionReader::DynVecType(item)
    }
}
impl<'r> ::core::convert::From<TableTypeReader<'r>> for UnionTypeUnionReader<'r> {
    fn from(item: TableTypeReader<'r>) -> Self {
        UnionTypeUnionReader::TableType(item)
    }
}
impl UnionTypeUnion {
    pub const NAME: &'static str = "UnionTypeUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            UnionTypeUnion::ArrayType(item) => item.as_bytes(),
            UnionTypeUnion::StructType(item) => item.as_bytes(),
            UnionTypeUnion::FixVecType(item) => item.as_bytes(),
            UnionTypeUnion::DynVecType(item) => item.as_bytes(),
            UnionTypeUnion::TableType(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            UnionTypeUnion::ArrayType(item) => item.as_slice(),
            UnionTypeUnion::StructType(item) => item.as_slice(),
            UnionTypeUnion::FixVecType(item) => item.as_slice(),
            UnionTypeUnion::DynVecType(item) => item.as_slice(),
            UnionTypeUnion::TableType(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            UnionTypeUnion::ArrayType(_) => 0,
            UnionTypeUnion::StructType(_) => 1,
            UnionTypeUnion::FixVecType(_) => 2,
            UnionTypeUnion::DynVecType(_) => 3,
            UnionTypeUnion::TableType(_) => 4,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            UnionTypeUnion::ArrayType(_) => "ArrayType",
            UnionTypeUnion::StructType(_) => "StructType",
            UnionTypeUnion::FixVecType(_) => "FixVecType",
            UnionTypeUnion::DynVecType(_) => "DynVecType",
            UnionTypeUnion::TableType(_) => "TableType",
        }
    }
    pub fn as_reader<'r>(&'r self) -> UnionTypeUnionReader<'r> {
        match self {
            UnionTypeUnion::ArrayType(item) => item.as_reader().into(),
            UnionTypeUnion::StructType(item) => item.as_reader().into(),
            UnionTypeUnion::FixVecType(item) => item.as_reader().into(),
            UnionTypeUnion::DynVecType(item) => item.as_reader().into(),
            UnionTypeUnion::TableType(item) => item.as_reader().into(),
        }
    }
}
impl<'r> UnionTypeUnionReader<'r> {
    pub const NAME: &'r str = "UnionTypeUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            UnionTypeUnionReader::ArrayType(item) => item.as_slice(),
            UnionTypeUnionReader::StructType(item) => item.as_slice(),
            UnionTypeUnionReader::FixVecType(item) => item.as_slice(),
            UnionTypeUnionReader::DynVecType(item) => item.as_slice(),
            UnionTypeUnionReader::TableType(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            UnionTypeUnionReader::ArrayType(_) => 0,
            UnionTypeUnionReader::StructType(_) => 1,
            UnionTypeUnionReader::FixVecType(_) => 2,
            UnionTypeUnionReader::DynVecType(_) => 3,
            UnionTypeUnionReader::TableType(_) => 4,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            UnionTypeUnionReader::ArrayType(_) => "ArrayType",
            UnionTypeUnionReader::StructType(_) => "StructType",
            UnionTypeUnionReader::FixVecType(_) => "FixVecType",
            UnionTypeUnionReader::DynVecType(_) => "DynVecType",
            UnionTypeUnionReader::TableType(_) => "TableType",
        }
    }
}
impl From<ArrayType> for UnionType {
    fn from(value: ArrayType) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl From<StructType> for UnionType {
    fn from(value: StructType) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl From<FixVecType> for UnionType {
    fn from(value: FixVecType) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl From<DynVecType> for UnionType {
    fn from(value: DynVecType) -> Self {
        Self::new_builder().set(value).build()
    }
}
impl From<TableType> for UnionType {
    fn from(value: TableType) -> Self {
        Self::new_builder().set(value).build()
    }
}
