// Generated by Molecule 0.7.5

#define MOLECULEC_VERSION 7005
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef DEFINITIONS_H
#define DEFINITIONS_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_DEFINITIONS
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * Reader APIs
 */

#define MolReader_ArrayType_verify(s, c) mol_verify_fixed_size(s, 3)
#define MolReader_ArrayType_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_ArrayType_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_ArrayType_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_StructType_verify(s, c) mol_verify_fixed_size(s, 4)
#define MolReader_StructType_get_f1(s) mol_slice_by_offset(s, 0, 3)
#define MolReader_StructType_get_f2(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_FixVecType_verify(s, c) mol_fixvec_verify(s, 1)
#define MolReader_FixVecType_length(s) mol_fixvec_length(s)
#define MolReader_FixVecType_get(s, i) mol_fixvec_slice_by_index(s, 1, i)
#define MolReader_FixVecType_raw_bytes(s) mol_fixvec_slice_raw_bytes(s)
MOLECULE_API_DECORATOR mol_errno MolReader_DynVecType_verify(const mol_seg_t *,
                                                             bool);
#define MolReader_DynVecType_length(s) mol_dynvec_length(s)
#define MolReader_DynVecType_get(s, i) mol_dynvec_slice_by_index(s, i)
MOLECULE_API_DECORATOR mol_errno MolReader_OptType_verify(const mol_seg_t *,
                                                          bool);
#define MolReader_OptType_is_none(s) mol_option_is_none(s)
MOLECULE_API_DECORATOR mol_errno MolReader_TableType_verify(const mol_seg_t *,
                                                            bool);
#define MolReader_TableType_actual_field_count(s) \
    mol_table_actual_field_count(s)
#define MolReader_TableType_has_extra_fields(s) mol_table_has_extra_fields(s, 5)
#define MolReader_TableType_get_f1(s) mol_table_slice_by_index(s, 0)
#define MolReader_TableType_get_f2(s) mol_table_slice_by_index(s, 1)
#define MolReader_TableType_get_f3(s) mol_table_slice_by_index(s, 2)
#define MolReader_TableType_get_f4(s) mol_table_slice_by_index(s, 3)
#define MolReader_TableType_get_f5(s) mol_table_slice_by_index(s, 4)
MOLECULE_API_DECORATOR mol_errno MolReader_UnionType_verify(const mol_seg_t *,
                                                            bool);
#define MolReader_UnionType_unpack(s) mol_union_unpack(s)

/*
 * Builder APIs
 */

#define MolBuilder_ArrayType_init(b) mol_builder_initialize_fixed_size(b, 3)
#define MolBuilder_ArrayType_set_nth0(b, p) \
    mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_ArrayType_set_nth1(b, p) \
    mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_ArrayType_set_nth2(b, p) \
    mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_ArrayType_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_ArrayType_clear(b) mol_builder_discard(b)
#define MolBuilder_StructType_init(b) mol_builder_initialize_fixed_size(b, 4)
#define MolBuilder_StructType_set_f1(b, p) mol_builder_set_by_offset(b, 0, p, 3)
#define MolBuilder_StructType_set_f2(b, p) \
    mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_StructType_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_StructType_clear(b) mol_builder_discard(b)
#define MolBuilder_FixVecType_init(b) mol_fixvec_builder_initialize(b, 16)
#define MolBuilder_FixVecType_push(b, p) mol_fixvec_builder_push_byte(b, p)
#define MolBuilder_FixVecType_build(b) mol_fixvec_builder_finalize(b)
#define MolBuilder_FixVecType_clear(b) mol_builder_discard(b)
#define MolBuilder_DynVecType_init(b) \
    mol_builder_initialize_with_capacity(b, 64, 64)
#define MolBuilder_DynVecType_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_DynVecType_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_DynVecType_clear(b) mol_builder_discard(b)
#define MolBuilder_OptType_init(b) mol_builder_initialize_fixed_size(b, 0)
#define MolBuilder_OptType_set(b, p, l) mol_option_builder_set(b, p, l)
#define MolBuilder_OptType_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_OptType_clear(b) mol_builder_discard(b)
#define MolBuilder_TableType_init(b) mol_table_builder_initialize(b, 256, 5)
#define MolBuilder_TableType_set_f1(b, p, l) mol_table_builder_add(b, 0, p, l)
#define MolBuilder_TableType_set_f2(b, p, l) mol_table_builder_add(b, 1, p, l)
#define MolBuilder_TableType_set_f3(b, p, l) mol_table_builder_add(b, 2, p, l)
#define MolBuilder_TableType_set_f4(b, p, l) mol_table_builder_add(b, 3, p, l)
#define MolBuilder_TableType_set_f5(b, p, l) mol_table_builder_add(b, 4, p, l)
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_TableType_build(mol_builder_t);
#define MolBuilder_TableType_clear(b) mol_builder_discard(b)
#define MolBuilder_UnionType_init(b) \
    mol_union_builder_initialize(b, 8, 0, MolDefault_ArrayType, 3)
#define MolBuilder_UnionType_set_ArrayType(b, p, l) \
    mol_union_builder_set(b, 0, p, l)
#define MolBuilder_UnionType_set_StructType(b, p, l) \
    mol_union_builder_set(b, 1, p, l)
#define MolBuilder_UnionType_set_FixVecType(b, p, l) \
    mol_union_builder_set(b, 2, p, l)
#define MolBuilder_UnionType_set_DynVecType(b, p, l) \
    mol_union_builder_set(b, 3, p, l)
#define MolBuilder_UnionType_set_TableType(b, p, l) \
    mol_union_builder_set(b, 4, p, l)
#define MolBuilder_UnionType_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_UnionType_clear(b) mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_ArrayType[3] = {____, ____,
                                                                ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_StructType[4] = {____, ____,
                                                                 ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_FixVecType[4] = {____, ____,
                                                                 ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DynVecType[4] = {0x04, ____,
                                                                 ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_OptType[0] = {};
MOLECULE_API_DECORATOR const uint8_t MolDefault_TableType[39] = {
    0x27, ____, ____, ____, 0x18, ____, ____, ____, 0x1c, ____,
    ____, ____, 0x20, ____, ____, ____, 0x24, ____, ____, ____,
    0x27, ____, ____, ____, ____, ____, ____, ____, 0x04, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_UnionType[7] = {
    ____, ____, ____, ____, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno
MolReader_DynVecType_verify(const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE * (item_count + 1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i = 1; i < item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        if (mol_contained_by(&inner, input) != MOL_OK) {
            return MOL_ERR_OFFSET;
        }
        mol_errno errno = MolReader_FixVecType_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    if (mol_contained_by(&inner, input) != MOL_OK) {
        return MOL_ERR_OFFSET;
    }
    return MolReader_FixVecType_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno
MolReader_OptType_verify(const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_DynVecType_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}
MOLECULE_API_DECORATOR mol_errno
MolReader_TableType_verify(const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 5) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 5) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE * (field_count + 1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count + 1];
    offsets[0] = offset;
    for (mol_num_t i = 1; i < field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i - 1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count - 1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
    mol_seg_t inner;
    mol_errno errno;
    inner.ptr = input->ptr + offsets[0];
    inner.size = offsets[1] - offsets[0];
    if (mol_contained_by(&inner, input) != MOL_OK) {
        return MOL_ERR_OFFSET;
    }
    errno = MolReader_FixVecType_verify(&inner, compatible);
    if (errno != MOL_OK) {
        return MOL_ERR_DATA;
    }
    inner.ptr = input->ptr + offsets[1];
    inner.size = offsets[2] - offsets[1];
    if (mol_contained_by(&inner, input) != MOL_OK) {
        return MOL_ERR_OFFSET;
    }
    errno = MolReader_DynVecType_verify(&inner, compatible);
    if (errno != MOL_OK) {
        return MOL_ERR_DATA;
    }
    inner.ptr = input->ptr + offsets[2];
    inner.size = offsets[3] - offsets[2];
    if (mol_contained_by(&inner, input) != MOL_OK) {
        return MOL_ERR_OFFSET;
    }
    errno = MolReader_StructType_verify(&inner, compatible);
    if (errno != MOL_OK) {
        return MOL_ERR_DATA;
    }
    inner.ptr = input->ptr + offsets[3];
    inner.size = offsets[4] - offsets[3];
    if (mol_contained_by(&inner, input) != MOL_OK) {
        return MOL_ERR_OFFSET;
    }
    errno = MolReader_ArrayType_verify(&inner, compatible);
    if (errno != MOL_OK) {
        return MOL_ERR_DATA;
    }
    inner.ptr = input->ptr + offsets[4];
    inner.size = offsets[5] - offsets[4];
    if (mol_contained_by(&inner, input) != MOL_OK) {
        return MOL_ERR_OFFSET;
    }
    errno = MolReader_OptType_verify(&inner, compatible);
    if (errno != MOL_OK) {
        return MOL_ERR_DATA;
    }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno
MolReader_UnionType_verify(const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    mol_num_t item_id = mol_unpack_number(input->ptr);
    mol_seg_t inner;
    inner.ptr = input->ptr + MOL_NUM_T_SIZE;
    inner.size = input->size - MOL_NUM_T_SIZE;
    switch (item_id) {
        case 0:
            return MolReader_ArrayType_verify(&inner, compatible);
        case 1:
            return MolReader_StructType_verify(&inner, compatible);
        case 2:
            return MolReader_FixVecType_verify(&inner, compatible);
        case 3:
            return MolReader_DynVecType_verify(&inner, compatible);
        case 4:
            return MolReader_TableType_verify(&inner, compatible);
        default:
            return MOL_ERR_UNKNOWN_ITEM;
    }
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t
MolBuilder_TableType_build(mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 24;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 3 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t *)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 3 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_FixVecType, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src + of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_DynVecType, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src + of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_StructType, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src + of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 3;
        memcpy(dst, &MolDefault_ArrayType, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src + of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_OptType, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src + of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_DEFINITIONS
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_DEFINITIONS
#endif /* __DEFINE_MOLECULE_API_DECORATOR_DEFINITIONS */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* DEFINITIONS_H */
